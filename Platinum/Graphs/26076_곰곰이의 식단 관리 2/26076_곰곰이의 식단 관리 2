#include<bits/stdc++.h>
using namespace std;

int dy[]{ -1, 1, 0, 0, -1, 1, 1, -1 }, dx[]{ 0, 0, -1, 1, 1, 1, -1, -1 };
queue <pair<int, int>> Q;
int n, m, i, j, l, M[2005][2005];
bool V[2005][2005];

void in()
{
	ios_base::sync_with_stdio(0); cin.tie(0);
	cin >> n >> m;
	for (i = 1; i <= n; i++)
		for (j = 1; j <= m; cin >> M[i][j++]);
}
bool f(int p, int q) { return p && q && p <= n && q <= m; }
void f1(int p, int q, int o)
{
	Q.push({ p, q });
	M[p][q] = o, V[p][q] = 1;
	while (Q.size())
	{
		auto [a, b] = Q.front(); Q.pop();
		for (i = 0; !o && i < 4; i++)
		{
			int y(a + dy[i]), x(b + dx[i]);
			if (f(y, x) && !M[y][x] && !V[y][x])
				V[y][x] = 1, Q.push({ y, x });
		}
		for (i = 0; o && i < 8; i++)
		{
			int y(a + dy[i]), x(b + dx[i]);
			if (f(y, x) && M[y][x] && !V[y][x])
				M[y][x] = o, V[y][x] = 1, Q.push({ y, x });
		}
	}
}
void f2()
{
	f1(1, 1, 0);
	if (!V[n][m])
		cout << 0, exit(0);
	for (j = 1; j <= n; j++)
	{
		if (M[j][1] && !V[j][1]) f1(j, 1, 2);
		if (M[j][m] && !V[j][m]) f1(j, m, 3);
	}
	for (j = 1; j <= m; j++)
	{
		if (M[1][j] && !V[1][j]) f1(1, j, 3);
		if (M[n][j] && !V[n][j]) f1(n, j, 2);
	}
}
void f3(int p = 0, int q = 0)
{
	for (i = 1; i <= n; i++)
		for (j = 1; j <= m; j++)
			if (!M[i][j])
			{
				for (p = q = l = 0; l < 8; l++)
				{
					int y(i + dy[l]), x(j + dx[l]);
					if (M[y][x] > 1)
						M[y][x] & 1 ? p++ : q++;
				}
				if ((p && q) || (i == 1 && q) || (i == n && p) || (j == 1 && p) || (j == m && q))
					cout << 1, exit(0);
			}
	cout << (n == 1 || m == 1 ? 1 : 2);
}
int main()
{
	in();
	f2();
	f3();
}
